    double LY = 5000;
    double CY = 20;
    double a = LY / CY * (1. / (1 + LY / CY));
    double b = 1 / (1 + LY / CY);
    
    double theta = 1000e-12;
    
    double t_d = 30.3e-9; // rise time 2
    double t_r = 70e-12; //decay time 5

    double s = 66e-12; // sigma trans 1 / 3
    double tsk = 2e-9; // 3 / 0
    
    double l = 10e-12; // cerenkov sigma 2   
    double cer_min = theta; 
    double cer_mean = theta + 2* l;
    
    double norm_c 	= 1. / (l * sqrt(TMath::Pi() / 2) * (1 + TMath::Erf((cer_mean - cer_min) / sqrt(2) / l))); 
    double norm_irf	= 1. / (s * sqrt(TMath::Pi() / 2) * (1 + TMath::Erf(tsk / sqrt(2) / s)));
    double norm_s 	= 1. / (t_d-t_r) ; 

---------------------------------
------ SHAO GROUP ---------------
---------------------------------

    // TF1 *shao
    norm_s, t_d, t_r, theta
      0      1    2    3
    (x > [3]) * [0] * (exp(- (x - [3]) / [1]) - exp(- (x - [3]) / [2]))
    

    // TF1 *shao_smear
    s, norm_irf, norm_s, t_d, tsk, t_r, theta
    0    1         2      3    4    5     6    
    sqrt(TMath::Pi() / 2) * [0] * [1] * [2] * 
    (
      exp(([0]*[0]-2*x*[3]+2*[3]*[4]+2*[3]*[6])/(2*[3]*[3]))
       *(
         TMath::Erf(([3]*(x-[6]-[4])-[0]*[0])/(sqrt(2)*[0]*[3]))
         +
         TMath::Erf(([3]*[4] +[0]*[0])/(sqrt(2)*[0]*[3]))
        )
      +exp(([0]*[0]-2*x*[5]+2*[5]*[4]+2*[5]*[6])/(2*[5]*[5]))
       *(
         TMath::Erf(([5]*(x-[6]-[4])-[0]*[0])/(sqrt(2)*[0]*[5]))
         +
         TMath::Erf(([5]*[4] +[0]*[0])/(sqrt(2)*[0]*[5]))
        )
     )

    // TF1 *Cshao
    norm_s, t_d, t_r, theta
     0       1    2     3
    (x > [3]) * [0] * ([1] - [2] - [1]*exp(- (x - [3]) / [1]) + [2]*exp(- (x - [3]) / [2]))
    

    // TF1 *Cshao_smear
    norm_irf, theta, tsk, s, t_r, t_d
     0          1     2   3   4    5
    [0]*[3]*sqrt(TMath::Pi()/2)*
    (
      (
        TMath::Erf((x-[1]-[2])/[3]/sqrt(2))
        +
        TMath::Erf([2]/[3]/sqrt(2))
      )
      +
      (
        [4]/([5]-[4])*exp((-2*x*[4]+2*[4]*[1]+2*[4]*[2]+[3]*[3])/2/[4]/[4])
        *(
           TMath::Erf((x-[1]-[2]-[3]*[3]/[4])/([3]*sqrt(2)))
           +
           TMath::Erf(([2]+[3]*[3]/[4])/[3]/sqrt(2))
        )
      )
      -
      (
        [5]/([5]-[4])*exp((-2*x*[5]+2*[5]*[1]+2*[5]*[2]+[3]*[3])/2/[5]/[5])
        *(
           TMath::Erf((x-[1]-[2]-[3]*[3]/[5])/[3]/sqrt(2))
           +
           TMath::Erf(([2]+[3]*[3]/[5])/[3]/sqrt(2))
         )
      )
    )
    
----------------------------------    
------ CER GROUP -----------------
----------------------------------

    // TF1 *cer 
    cer_min, norm_c, cer_mean, l
      0        1       2       3
    (x > [0]) * [1] * exp(- (x-[2]) * (x-[2]) / 2. / [3] / [3])
    
    
    // TF1 *cer_smear 
    l, s, norm_c, tsk, cer_min, theta, norm_irf, cer_mean
    0  1    2       3     4       5       6         7  
    (1.0 / (sqrt([0]*[0]+[1]*[1]))) * sqrt(TMath::Pi() / 2) * [0] * [1] * [2] * [6] * 
    (exp(-([3]+[7]-x)*([3]+[7]-x)/2/([0]*[0]+[1]*[1]))*
      (
       TMath::Erf((-[3]*[0]*[0]+[7]*[1]*[1]+[0]*[0]*(x-[4])-[1]*[1]*x+[1]*[1]*(x-[4]))/(sqrt(2)*[0]*[1]*sqrt([0]*[0]+[1]*[1])))
       -
       TMath::Erf((-[3]*[0]*[0]+[7]*[1]*[1]-[1]*[1]*x)/(sqrt(2)*[0]*[1]*sqrt([0]*[0]+[1]*[1])))
      )
    )


    // TF1 *cer_smear_easy
    norm_irf_easy, tsk, cer_mean, s
      0             1      2      3
    (x > 0.) * [0] * exp(- (x - [1] - [2]) * (x - [1] - [2]) / 2. / [3] / [3])
     
     
    // TF1 *Ccer_smear_easy
    norm_irf_easy, s, tsk, cer_mean        
     0             1   2      3
    [0] * sqrt(TMath::Pi() / 2) * [1] * (TMath::Erf((x-[2]-[3])/([1]*sqrt(2))) + TMath::Erf(([2]+[3])/([1]*sqrt(2))))
    
-----------------------
------- IRF GROUP -----
-----------------------
     
    // TF1 *irf
    norm_irf, tsk, s
     0         1   2
    (x > 0.0) * [0] * exp(- (x-[1]) * (x-[1]) / 2. / [2] / [2])

----------------------------
------- CONV/SUM GROUP -----
----------------------------

    // TF1 *sum
    a*norm_s, t_d, t_r, theta, cer_min, b*norm_c, cer_mean , l
      0        1    2     3       4        5         6       7
    (x > [3]) * [0] * (exp(- (x - [3]) / [1]) - exp(- (x - [3]) / [2])) 
    +  (x > [4]) * [5] * exp(- (x-[6]) * (x-[6]) / 2. / [7] / [7])


    // TF1 *conv_last
    s, norm_irf, norm_s*a, t_d, tsk, t_r, theta, l, norm_c*b, cer_min, cer_mean  
    0    1          2        3   4    5    6     7     8        9         10    
    (1.0/(sqrt([7]*[7]+[0]*[0])))*sqrt(TMath::Pi()/2)*[7]*[0]*[8]*[1]*
    (exp(-([4]+[10]-x)*([4]+[10]-x)/2/([7]*[7]+[0]*[0]))*
      (
        TMath::Erf((-[4]*[7]*[7]+[10]*[0]*[0]+[7]*[7]*(x-[9])-[0]*[0]*x+[0]*[0]*(x-[9]))/(sqrt(2)*[7]*[0]*sqrt([7]*[7]+[0]*[0])))
        -
        TMath::Erf((-[4]*[7]*[7]+[10]*[0]*[0]-[0]*[0]*x)/(sqrt(2)*[7]*[0]*sqrt([7]*[7]+[0]*[0])))
      )
    )
    +
    sqrt(TMath::Pi()/2)*[0]*[1]*[2]*
    (exp(([0]*[0]-2*x*[3]+2*[3]*[4]+2*[3]*[6])/(2*[3]*[3]))*
      (
        TMath::Erf(([3]*(x-[6]-[4])-[0]*[0])/(sqrt(2)*[0]*[3]))
        +
        TMath::Erf(([3]*[4] +[0]*[0])/(sqrt(2)*[0]*[3]))
      )
     -
     exp(([0]*[0]-2*x*[5]+2*[5]*[4]+2*[5]*[6])/(2*[5]*[5]))*
      (
        TMath::Erf(([5]*(x-[6]-[4])-[0]*[0])/(sqrt(2)*[0]*[5]))
        +
        TMath::Erf(([5]*[4] +[0]*[0])/(sqrt(2)*[0]*[5]))
      )
    )


    // TF1 *CTot
    norm_irf, theta, tsk, s, t_r, t_d, cer_mean, b, a   
      0         1     2   3   4    5      6      7  8
    ( [7] * [0] * sqrt(TMath::Pi() / 2) * [3] * 
      (TMath::Erf((x-[2]-[6])/([3]*sqrt(2))) + TMath::Erf(([2]+[6])/([3]*sqrt(2))))
    ) 
    + 
    [8]*[0]*[3]*sqrt(TMath::Pi()/2)
    *(
      (TMath::Erf((x-[1]-[2])/[3]/sqrt(2))+TMath::Erf([2]/[3]/sqrt(2)))
      + 
      ( [4]/([5]-[4])*exp((-2*x*[4]+2*[4]*[1]+2*[4]*[2]+[3]*[3])/2/[4]/[4])
        *(TMath::Erf((x-[1]-[2]-[3]*[3]/[4])/([3]*sqrt(2)))+TMath::Erf(([2]+[3]*[3]/[4])/[3]/sqrt(2)))
      )
      -
      ( [5]/([5]-[4])*exp((-2*x*[5]+2*[5]*[1]+2*[5]*[2]+[3]*[3])/2/[5]/[5]) 
        *(TMath::Erf((x-[1]-[2]-[3]*[3]/[5])/[3]/sqrt(2))+TMath::Erf(([2]+[3]*[3]/[5])/[3]/sqrt(2)))
      )
     )
    

    // TF1 *n_phot
    int order = 1;
    double arraypam[15];
    arraypam[0] = norm_irf;
    arraypam[1] = theta;
    arraypam[2] = tsk;
    arraypam[3] = s;
    arraypam[4] = t_r;
    arraypam[5] = t_d;
    arraypam[6] = cer_mean;
    arraypam[7] = b;
    arraypam[8] = a;
    arraypam[9] = LY+CY;
    arraypam[10] = order;
    arraypam[11] = l;
    arraypam[12] = cer_min;
    arraypam[13] = norm_c;
    arraypam[14] = norm_s;
    TMath::Binomial([9], [10]) * [10] *
    (
      (
        [7] * [0] * sqrt(TMath::Pi() / 2) * [3] * 
        (TMath::Erf((x-[2]-[6])/([3]*sqrt(2))) + TMath::Erf(([2]+[6])/([3]*sqrt(2)))) 
        + [8]*[0]*[3]*sqrt(TMath::Pi()/2)*
        (
          (TMath::Erf((x-[1]-[2])/[3]/sqrt(2))+TMath::Erf([2]/[3]/sqrt(2)))
          +
          ([4]/([5]-[4])*TMath::Exp((-2*x*[4]+2*[4]*[1]+2*[4]*[2]+[3]*[3])/2/[4]/[4])*
             (TMath::Erf((x-[1]-[2]-[3]*[3]/[4])/([3]*sqrt(2)))+TMath::Erf(([2]+[3]*[3]/[4])/[3]/sqrt(2))))
          -([5]/([5]-[4])*TMath::Exp((-2*x*[5]+2*[5]*[1]+2*[5]*[2]+[3]*[3])/2/[5]/[5])*
             (TMath::Erf((x-[1]-[2]-[3]*[3]/[5])/[3]/sqrt(2))+TMath::Erf(([2]+[3]*[3]/[5])/[3]/sqrt(2))))
        )
      )^([10]-1))
     *( (1 - (
          [7] * [0] * sqrt(TMath::Pi() / 2) * [3] * 
          (TMath::Erf((x-[2]-[6])/([3]*sqrt(2))) + TMath::Erf(([2]+[6])/([3]*sqrt(2)))) 
          + [8]*[0]*[3]*sqrt(TMath::Pi()/2)*
          (
            (TMath::Erf((x-[1]-[2])/[3]/sqrt(2))+TMath::Erf([2]/[3]/sqrt(2)))
            +
            ([4]/([5]-[4])*TMath::Exp((-2*x*[4]+2*[4]*[1]+2*[4]*[2]+[3]*[3])/2/[4]/[4])*
               (TMath::Erf((x-[1]-[2]-[3]*[3]/[4])/([3]*sqrt(2)))+TMath::Erf(([2]+[3]*[3]/[4])/[3]/sqrt(2))))
            -([5]/([5]-[4])*TMath::Exp((-2*x*[5]+2*[5]*[1]+2*[5]*[2]+[3]*[3])/2/[5]/[5])*
               (TMath::Erf((x-[1]-[2]-[3]*[3]/[5])/[3]/sqrt(2))+TMath::Erf(([2]+[3]*[3]/[5])/[3]/sqrt(2))))
          )
      ))^([9]-[10]))
     *( (1.0/(sqrt([11]*[11]+[3]*[3])))*sqrt(TMath::Pi()/2)*[11]*[3]*[13]*[7]*[0]*
        (exp(-([2]+[6]-x)*([2]+[6]-x)/2/([11]*[11]+[3]*[3]))
          *(
            TMath::Erf((-[2]*[11]*[11]+[6]*[3]*[3]+[11]*[11]*(x-[12])-[3]*[3]*x+[3]*[3]*(x-[12]))/(sqrt(2)*[11]*[3]*sqrt([11]*[11]+[3]*[3])))
            -
            TMath::Erf((-[2]*[11]*[11]+[6]*[3]*[3]-[3]*[3]*x)/(sqrt(2)*[11]*[3]*sqrt([11]*[11]+[3]*[3])))
           )
         )
         +sqrt(TMath::Pi()/2)*[3]*[0]*[14]*[8]*
          (
             exp(([3]*[3]-2*x*[5]+2*[5]*[2]+2*[5]*[1])/(2*[5]*[5]))
               *(TMath::Erf(([5]*(x-[1]-[2])-[3]*[3])/(sqrt(2)*[3]*[5]))+TMath::Erf(([5]*[2] +[3]*[3])/(sqrt(2)*[3]*[5])))
             +exp(([3]*[3]-2*x*[4]+2*[4]*[2]+2*[4]*[1])/(2*[4]*[4]))
               *(TMath::Erf(([4]*(x-[1]-[2])-[3]*[3])/(sqrt(2)*[3]*[4]))+TMath::Erf(([4]*[2] +[3]*[3])/(sqrt(2)*[3]*[4])))
          )
       )
    
